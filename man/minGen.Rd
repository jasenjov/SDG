% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/utility.R
\name{minGen}
\alias{minGen}
\title{Performance data generation according to a pessimistic approach. Linear model.}
\usage{
minGen(its, sts, rank, q = NULL, skills = NULL, mean = 0, deviation = 1)
}
\arguments{
\item{its}{Number of items.}

\item{sts}{Number of students.}

\item{rank}{Number of skills the set of items has.}

\item{q}{Q-Matrix representing the skills required to succeed an item. Skills per item matrix. \{0,1\} values. NULL by default.}

\item{skills}{Matrix representing the probability of each student to answer correctly to an item involving a specific skill. students per skills matrix.[0-1] values. NULL by default.}

\item{mean}{If the skills matrix is not provided to the function, this parameter is the mean used to generate that matrix according to the standard distribution. 0 by default.}

\item{deviation}{If the skills matrix is not provided to the function, this parameter is the standard deviation used to generate that matrix according to the standard distribution. 1 by default.}
}
\value{
A list with the following information:
 \item{results}{Students per items matrix where each element represents if the student answered correctly (1) or not (0) to the correspondent item.}
 \item{skills.matrix}{A student per skill matrix where each element represents the probability of a student to answer correctly to an item that involves the correspondent skill.}
 \item{q.matrix}{The Q-matrix used.}
}
\description{
This function generates students' performance data according to a Q-matrix sampling model where more than one skill can be required to succeed an item. \cr
Given a number of skills involved in the set of items, there is a matrix in which each element represents the probability of a student to suceed an item involving a specific skill. It's a students per skills matrix (skills matrix).It is formed by [0-1] values.  \cr
So, if an item requires 2 skills, the probability of a student to answer correctly to that item will be the minimum between the probabilities of this student to succeed items involving those skills (skills matrix).
}
\examples{
#####EXAMPLE 1 : Generation introducing the minimum number of parameters required #####

 # We generate student performance data about 3 students answering to 5 items and 3 skills.
 result <- minGen(its = 5, sts = 3, rank = 3)

 # We extract the correspondent information

 performance  <- result$results
 performance
       [,1] [,2] [,3] [,4] [,5]
 [1,]    0    1    1    0    1
 [2,]    1    1    0    1    1
 [3,]    1    0    0    0    0

 skills  <- result$skills.matrix
 skills
         [,1]      [,2]      [,3]
 [1,] 0.6760280 0.6686970 0.5695697
 [2,] 0.5326328 0.7144692 0.9995925
 [3,] 0.3629950 0.6258358 0.9310147

 q.matrix  <- result$q.matrix
 q.matrix
       [,1] [,2] [,3] [,4] [,5]
 [1,]    0    1    1    1    1
 [2,]    1    1    0    1    0
 [3,]    1    0    0    1    0

#####EXAMPLE 2 : Generation modeling the mean and the standard deviation used #####

 # We generate student performance data about 3 students answering to 5 items and 3 skills.
 #For the stantard distribution (skills matrix), we use a mean of 0.5 and a standard
 deviation of 0.2.
 result <- minGen(its = 5, sts = 3, rank = 3,mean=0.5,deviation=0.2)

 # We extract the correspondent information

 performance  <- result$results
 performance
       [,1] [,2] [,3] [,4] [,5]
 [1,]    0    1    1    0    0
 [2,]    1    0    0    1    0
 [3,]    1    1    1    1    0

 skills  <- result$skills.matrix
 skills
         [,1]      [,2]      [,3]
 [1,] 0.7211562 0.6510095 0.7547658
 [2,] 0.6853259 0.7352926 0.6736784
 [3,] 0.7387059 0.6182576 0.6575972

 q.matrix  <- result$q.matrix
 q.matrix
       [,1] [,2] [,3] [,4] [,5]
 [1,]    1    0    0    0    0
 [2,]    0    1    1    1    1
 [3,]    0    0    0    0    0

 #####EXAMPLE 3 : Generation introducing a Q-matrix #####

 #We generate a Q-Matrix with 3 skills involved.
 q.matrix <- QgenInc(num.skills = 3,maxSkillsPerItem=2)
 q.matrix
       [,1] [,2] [,3] [,4] [,5] [,6]
 [1,]    1    0    0    1    1    0
 [2,]    0    1    0    1    0    1
 [3,]    0    0    1    0    1    1

# We generate student performance data about 3 students answering to 6 items, 3 skills and
the Q Matrix we want.
# For the stantard distribution (skills matrix), we use a mean of 0.5 and a standard
deviation of 0.2.
 result <- minGen(its = 6, sts = 3, rank = 3,q = q.matrix,mean=0.5,deviation=0.2)

 # We extract the correspondent information

 performance  <- result$results
 performance
       [,1] [,2] [,3] [,4] [,5] [,6]
 [1,]    0    0    0    1    1    0
 [2,]    1    1    1    0    0    1
 [3,]    1    1    0    1    1    0
 skills  <- result$skills.matrix
 skills
         [,1]      [,2]      [,3]
 [1,] 0.6868604 0.6387136 0.6409983
 [2,] 0.5920339 0.6761624 0.6858127
 [3,] 0.7560064 0.6037571 0.5528284
 q.matrix  <- result$q.matrix
 q.matrix
       [,1] [,2] [,3] [,4] [,5] [,6]
 [1,]    1    0    0    1    1    0
 [2,]    0    1    0    1    0    1
 [3,]    0    0    1    0    1    1

 #####EXAMPLE 4 : Generation introducing a Q-Matrix and a skills matrix #####

 #We generate a Q-Matrix with 3 skills involved.
 q.matrix <- QgenInc(num.skills = 3,maxSkillsPerItem=2)
 q.matrix
       [,1] [,2] [,3] [,4] [,5] [,6]
 [1,]    1    0    0    1    1    0
 [2,]    0    1    0    1    0    1
 [3,]    0    0    1    0    1    1

 #We generate a skills matrix  skills for 3 students, 3 skills, a mean of 0 and a standard
 deviation of 1.
 skills  <- skillsGen(sts = 3,mean = 0,deviation = 1,rank = 3)
 skills
         [,1]      [,2]      [,3]
 [1,] 0.38186877 0.5632612 0.6603963
 [2,] 0.02718055 0.2536993 0.2962467
 [3,] 0.60535135 0.9708733 0.5421141

 # We generate student performance data about 3 students answering to 6 items, 3 skills and
 the Q Matrixand skills matrix we want.
 result <- minGen(its = 6, sts = 3, rank = 3,q = q.matrix,skills = skills)

 performance  <- result$results
 performance
       [,1] [,2] [,3] [,4] [,5] [,6]
 [1,]    0    0    0    1    0    1
 [2,]    0    0    0    0    1    1
 [3,]    0    1    1    1    0    1

 skills  <- result$skills.matrix
 skills
         [,1]      [,2]      [,3]
 [1,] 0.38186877 0.5632612 0.6603963
 [2,] 0.02718055 0.2536993 0.2962467
 [3,] 0.60535135 0.9708733 0.5421141

 q.matrix  <- result$q.matrix
 q.matrix
       [,1] [,2] [,3] [,4] [,5] [,6]
 [1,]    1    0    0    1    1    0
 [2,]    0    1    0    1    0    1
 [3,]    0    0    1    0    1    1
}
\seealso{
\code{\link{QgenInc}} for the external generation of a Q-matrix.\cr
 \code{\link{QgenReg}} for the external generation of a Q-matrix.\cr
 \code{\link{extendQ}} for the external generation of a Q-matrix.\cr
 \code{\link{reduceQ}} for the external generation of a Q-matrix.\cr
 \code{\link{skillsGen}} for the external generation of the skills matrix.\cr
}

